package bigezo.code.backend.controller;

import bigezo.code.backend.service.file.SchoolStorageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api/files")
public class FileController {

    private final SchoolStorageService schoolStorageService;

    @Autowired
    public FileController(SchoolStorageService schoolStorageService) {
        this.schoolStorageService = schoolStorageService;
    }

    /**
     * Upload file for specific school
     */
    @PostMapping("/schools/{schoolId}/upload")
    public ResponseEntity<String> uploadFile(
            @PathVariable String schoolId,
            @RequestParam("file") MultipartFile file,
            @RequestParam("type") String fileType) {
        try {
            // File types: profile_picture, student_video, image1, image2
            String url = schoolStorageService.uploadFileForSchool(schoolId, file, fileType);
            return ResponseEntity.ok().body("File uploaded successfully! URL: " + url);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Error uploading file: " + e.getMessage());
        }
    }

    /**
     * Delete file for specific school
     */
    @DeleteMapping("/schools/{schoolId}/delete/{fileName}")
    public ResponseEntity<String> deleteFile(
            @PathVariable String schoolId,
            @PathVariable String fileName) {
        try {
            schoolStorageService.deleteFileForSchool(schoolId, fileName);
            return ResponseEntity.ok().body("File deleted successfully!");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Error deleting file: " + e.getMessage());
        }
    }

    /**
     * List files for specific school
     */
    @GetMapping("/schools/{schoolId}/list")
    public ResponseEntity<String> listFiles(@PathVariable String schoolId) {
        try {
            ListObjectsV2Result result = schoolStorageService.listFilesForSchool(schoolId);
            return ResponseEntity.ok().body(result.getObjectSummaries().toString());
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Error listing files: " + e.getMessage());
        }
    }
}
